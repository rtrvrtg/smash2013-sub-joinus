<?php
/**
 * @file
 * Code for the SMASH! Position List feature.
 */

include_once 'smash_position_list.features.inc';

/**
 * Loads AJAX for homepage
 */
function smash_position_list_init() {
  $path = request_path();
  if ($path == '' || $path == 'position-list' || strpos($path, 'position-list') === 0) {
    drupal_add_library('system', 'drupal.ajax');
  }
}

/**
* Implementation of hook_menu().
*/
function smash_position_list_menu() {
  $items = array();
  
  $items['request/position-list/%/%'] = array(
    'page callback' => 'smash_position_list_get_view',
    'page arguments' => array(2, 3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK, 
  );
  
  $items['register/%/%'] = array(
    'page callback' => 'smash_position_list_register_form',
    'page arguments' => array(1, 2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK, 
  );

  return $items;
}

/**
 * JS callback for job list
 */
function smash_position_list_get_view() {
  $args = func_get_args();
  $dept_slug = array_shift($args);
  
  $pos_slug = 0;
  $type = NULL;
  
  if (count($args) > 1) {
    $pos_slug = array_shift($args);
  }
  if (count($args) > 0) {
    $type = array_pop($args);
  }
  
  $pos_slug_ok = ($pos_slug != '' && $pos_slug != 'none');
  
  if ($type == 'ajax') {
    $commands = array();
    
    $pos_elems = '.ajax-result-pane-positions > .pane-content > *';
    $des_elems = '.ajax-result-pane-position-description > .pane-content > *';
    
    if ($pos_slug_ok) {
      $commands[] = ajax_command_replace($des_elems, views_embed_view('position_display', 'ctools_context_1', $pos_slug));
    }
    else {
      $commands[] = ajax_command_replace($pos_elems, views_embed_view('positions', 'ctools_context_1', $dept_slug));      
      $commands[] = ajax_command_replace($des_elems, '');
    }

    $page = array('#type' => 'ajax', '#commands' => $commands);
    ajax_deliver($page);
  }
  else {
    if ($pos_slug_ok) {
      drupal_goto('position-list/' . $dept_slug . '/' . $pos_slug);
    }
    else {
      drupal_goto('position-list/' . $dept_slug);
    }
  }
}

/**
 * Registration form callback
 */
function smash_position_list_register_form($dept_slug, $pos_slug) {
  $dept = SmashPositionListUtils::getDepartment($dept_slug);
  $pos  = SmashPositionListUtils::getPosition($pos_slug, $dept_slug);
  
  if ($pos) {
    $pos = reset($pos);
    drupal_set_title($pos->title);
    return registration_register_page('node', $pos);
  }
  else {
    drupal_not_found();
  }
}

/**
 * Alter rego form
 */
function smash_position_list_form_registration_form_alter(&$form, &$form_state, $form_id) {
  $form['warning'] = array(
    '#markup' => '<p>' . t('All items marked with a red asterisk !ast are compulsory.', array(
      '!ast' => '<span class="form-item"><span class="form-required">*</span></span>'
    )) . '</p>',
    '#weight' => -1000,
  );
  
  if (count($form['who_is_registering']['#options']) == 1) {
    $keys = array_keys($form['who_is_registering']['#options']);
    $form['who_is_registering']['#type']  = 'value';
    $form['who_is_registering']['#value'] = 'registration_registrant_type_anon';
  }

  $form['count']['#type'] = 'value';
  
  $form['actions']['submit']['#value'] = t('Submit Registration');
  $form['actions']['cancel']['#href'] = 'position-list';
  
  $form['anon_mail']['#required'] = TRUE;
  
  $form['#submit'][] = 'smash_position_list_registration_form_postsubmit';
  
  if ($form['#bundle'] == 'crew') {
    // Disable prep field
    unset($form['field_preparation']);
    unset($form['field_preferred_breaks']);
    unset($form['field_address']);
  }
}

function smash_position_list_registration_form_postsubmit($form, &$form_state) {
  // @TODO: better thank you message.
  $form_state['redirect'] = '<front>';
}

/**
 * Various entity fetchers
 */
class SmashPositionListUtils {
  protected function buildQuery($bundle_type, $slug, $additional_fields = array()) {
    $q = new EntityFieldQuery();
    
    $q->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', $bundle_type)
      ->propertyCondition('status', 1)
      ->fieldCondition('field_url_slug', 'value', $slug);
    
    foreach ($additional_fields as $k => $v) {
      list($col, $value) = $v;
      $q->fieldCondition($k, $col, $v);
    }
    return $q;
  }
  
  protected function fetch(EntityFieldQuery $q) {
    $result = $q->execute();
    if (!empty($result['node'])) {
      return entity_load('node', array_keys($result['node']));
    }
    return NULL;
  }
  
  function getDepartment($slug) {
    $q = self::buildQuery('department', $slug);
    return self::fetch($q);
  }
  
  function getPosition($slug, $dept_slug = NULL) {
    $props = array();
    if (!is_null($dept_slug)) {
      $dept = self::getDepartment($dept_slug);
      if ($dept) {
        $dept = reset($dept);
        $props['field_department'] = array('target_id', $dept->nid);
      }
    }
    
    $q = self::buildQuery('position', $slug, $props);
    return self::fetch($q);
  }
}
